# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'.source.erb':
  'Include debugger':
    'prefix': 'debug'
    'body': '<% require \'pry\'; binding.pry %>'
'.source.rb':
  'byebug':
    'prefix': 'bb'
    'body': 'require "byebug"; byebug;'
'.source.js':
  'Functional React component':
    'prefix': 'fcomp'
    'body': 'import React from "react";\n\nconst $1 = (props) => {\n\treturn (\n\t\t<div>$1</div>\n\t);\n};\n\nexport default $1;'
  'Class React component':
    'prefix': 'ccomp'
    'body': 'import React from "react";\n\nclass $1 extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>$1</div>\n\t\t);\n\t}\n}\n\nexport default $1;'
  'Redux container component':
    'prefix': 'rcont'
    'body': 'import { connect } from "react-redux";\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t};\n};\n\nconst $1 = () => {\n\treturn <div></div>;\n};\n\nexport default connect(\n\tmapStateToProps,\n\tmapDispatchToProps\n)($1);'
